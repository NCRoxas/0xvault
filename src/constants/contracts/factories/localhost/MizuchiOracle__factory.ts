/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MizuchiOracle,
  MizuchiOracleInterface,
} from "../../localhost/MizuchiOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "estimateAggregator",
    outputs: [
      {
        internalType: "int256",
        name: "price",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "amountIn",
        type: "uint128",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32",
      },
    ],
    name: "estimateOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IUniswapV3Factory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610e1a380380610e1a8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b0316610dae61006c6000398061025f52806106cf5250610dae6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635c43ebd014610046578063c45a0155146100cb578063de52a908146100fc575b600080fd5b6100b9600480360360c081101561005c57600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff9081169160208101358216916040820135169060608101356fffffffffffffffffffffffffffffffff1690608081013562ffffff169060a0013563ffffffff1661012f565b60408051918252519081900360200190f35b6100d36106cd565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100b96004803603602081101561011257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106f1565b60008673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061019657508573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b61020157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c696420746f6b656e00000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f1698ee8200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152888116602483015262ffffff8616604483015291516000927f00000000000000000000000000000000000000000000000000000000000000001691631698ee82916064808301926020929190829003018186803b1580156102a557600080fd5b505afa1580156102b9573d6000803e3d6000fd5b505050506040513d60208110156102cf57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff811661035557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f706f6f6c20646f65736e27742065786973740000000000000000000000000000604482015290519081900360640190fd5b60008873ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146103905788610392565b875b604080516002808252606082018352929350600092909160208301908036833701905050905084816000815181106103c657fe5b602002602001019063ffffffff16908163ffffffff16815250506000816001815181106103ef57fe5b63ffffffff9092166020928302919091018201526040517f883bdbfd0000000000000000000000000000000000000000000000000000000081526004810182815283516024830152835160009373ffffffffffffffffffffffffffffffffffffffff88169363883bdbfd938793909283926044019185820191028083838b5b8381101561048657818101518382015260200161046e565b505050509050019250505060006040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604090815281101561050457600080fd5b810190808051604051939291908464010000000082111561052457600080fd5b90830190602082018581111561053957600080fd5b825186602082028301116401000000008211171561055657600080fd5b82525081516020918201928201910280838360005b8381101561058357818101518382015260200161056b565b50505050905001604052602001805160405193929190846401000000008211156105ac57600080fd5b9083019060208201858111156105c157600080fd5b82518660208202830111640100000000821117156105de57600080fd5b82525081516020918201928201910280838360005b8381101561060b5781810151838201526020016105f3565b5050505090500160405250505050905060008160008151811061062a57fe5b60200260200101518260018151811061063f57fe5b602002602001015103905060008763ffffffff168260060b8161065e57fe5b05905060008260060b12801561068857508763ffffffff168260060b8161068157fe5b0760060b15155b156106b0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b6106bc818b8d8861076e565b9d9c50505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d60a081101561076357600080fd5b506020015192915050565b60008061077a86610917565b90506fffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff8216116108485773ffffffffffffffffffffffffffffffffffffffff8082168002908481169086161061080a576108057801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683610caa565b610840565b61084081876fffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000610caa565b92505061090e565b600061087473ffffffffffffffffffffffffffffffffffffffff83168068010000000000000000610caa565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106108dc576108d7700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683610caa565b61090a565b61090a81876fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000610caa565b9250505b50949350505050565b60008060008360020b1261092e578260020b610936565b8260020b6000035b9050620d89e88111156109aa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600182166109cb577001000000000000000000000000000000006109dd565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610a11576ffff97272373d413259a46990580e213a0260801c5b6004821615610a30576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610a4f576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610a6e576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610a8d576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610aac576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610acb576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610aeb576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610b0b576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b2b576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610b4b576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610b6b576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610b8b576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610bab576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610bcb576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610bec576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610c0c576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c2b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610c48576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610c8157807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610c7d57fe5b0490505b640100000000810615610c95576001610c98565b60005b60ff16602082901c0192505050919050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870986860292508281109083900303905080610cfe5760008411610cf357600080fd5b508290049050610d71565b808411610d0a57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b939250505056fea2646970667358221220c8fcfb1f1ec8b83ec317e7bb1bda42b98ad63d974d1280f3730724cc90e5b77c64736f6c63430007060033";

type MizuchiOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MizuchiOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MizuchiOracle__factory extends ContractFactory {
  constructor(...args: MizuchiOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MizuchiOracle> {
    return super.deploy(_factory, overrides || {}) as Promise<MizuchiOracle>;
  }
  override getDeployTransaction(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, overrides || {});
  }
  override attach(address: string): MizuchiOracle {
    return super.attach(address) as MizuchiOracle;
  }
  override connect(signer: Signer): MizuchiOracle__factory {
    return super.connect(signer) as MizuchiOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MizuchiOracleInterface {
    return new utils.Interface(_abi) as MizuchiOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MizuchiOracle {
    return new Contract(address, _abi, signerOrProvider) as MizuchiOracle;
  }
}
